---
interface NavItem {
  label: string;
  href: string;
  icon: string;
}

const navItems: NavItem[] = [
  {
    label: "Inicio",
    href: "#home",
    icon: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24" fill="currentColor"><path d="M21 20C21 20.5523 20.5523 21 20 21H4C3.44772 21 3 20.5523 3 20V9.48907C3 9.18048 3.14247 8.88917 3.38606 8.69972L11.3861 2.47749C11.7472 2.19663 12.2528 2.19663 12.6139 2.47749L20.6139 8.69972C20.8575 8.88917 21 9.18048 21 9.48907V20ZM19 19V9.97815L12 4.53371L5 9.97815V19H19Z"></path></svg>`,
  },
  {
    label: "Proyectos",
    href: "#projects",
    icon: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24" fill="currentColor"><path d="M4 5V19H20V7H11.5858L9.58579 5H4ZM12.4142 5H21C21.5523 5 22 5.44772 22 6V20C22 20.5523 21.5523 21 21 21H3C2.44772 21 2 20.5523 2 20V4C2 3.44772 2.44772 3 3 3H10.4142L12.4142 5Z"></path></svg>`,
  },
  {
    label: "Contacto",
    href: "#contact",
    icon: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24" fill="currentColor"><path d="M21.7267 2.95694L16.2734 22.0432C16.1225 22.5716 15.7979 22.5956 15.5563 22.1126L11 13L1.9229 9.36919C1.41322 9.16532 1.41953 8.86022 1.95695 8.68108L21.0432 2.31901C21.5716 2.14285 21.8747 2.43866 21.7267 2.95694ZM19.0353 5.09647L6.81221 9.17085L12.4488 11.4255L15.4895 17.5068L19.0353 5.09647Z"></path></svg>`,
  },
];
---

<div class="flex justify-center w-full">
  <nav
    id="main-nav"
    class="fixed left-1/2 -translate-x-1/2 z-[100] bg-[var(--background)] border border-1 border-transparent backdrop-blur-xl transition-all duration-500 ease-in-out md:top-6 md:bottom-auto bottom-0 w-[80%]"
  >
    <div class="container mx-auto flex justify-center items-center p-3">
      <ul
        class="flex w-full justify-between md:space-x-6 md:justify-center md:gap-12 gap-6"
      >
        {
          navItems.map((item) => (
            <li class="flex-1 md:flex-none">
              <a
                href={item.href}
                class="flex flex-col items-center gap-1 text-[var(--white-icon)] transition-colors text-xs md:text-base relative group"
              >
                <div class="absolute -left-6 top-1/2 -translate-y-1/2 w-2 h-2 rounded-full transition-all duration-300 scale-0 opacity-0 bg-[#A9FF5B] nav-indicator hidden md:block" />
                <span class="md:hidden flex items-center justify-center w-6 h-6">
                  <fragment set:html={item.icon} />
                </span>
                <span class="hidden md:inline-block">{item.label}</span>
                <span class="md:hidden">{item.label}</span>
              </a>
            </li>
          ))
        }
      </ul>
    </div>
  </nav>
</div>

<style>
  nav {
    transform: translateX(-50%);
    background-color: var(--background);
    transition:
      background-color 0.3s ease,
      border-radius 0.3s ease,
      border-color 0.3s ease;
  }

  nav.scrolling {
    background-color: var(--component-bg);
    border-color: #ffffff10;
    border-radius: 9999px;
  }

  nav a.active .nav-indicator {
    transform: translateY(-50%) scale(1);
    opacity: 1;
  }

  nav a.active {
    color: white !important;
  }

  @media (max-width: 767px) {
    nav {
      width: 100% !important;
      transform: translateX(-50%);
      bottom: 0;
      left: 50%;
      position: fixed;
      border-radius: 1rem 1rem 0 0;
      border-color: #ffffff10;
    }

    nav.scrolling {
      border-radius: 1rem 1rem 0 0;
      background-color: var(--component-bg);
    }

    body {
      padding-bottom: 70px;
    }
  }
</style>

<script>
  // Función para esperar a que el DOM esté completamente cargado
  function waitForDOMContent(callback) {
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', callback);
    } else {
      callback();
    }
  }

  // Inicializar cuando todo esté listo
  waitForDOMContent(() => {
    const nav = document.getElementById("main-nav");
    const maxScroll = 1000;
    let rafId = null;

    // Función para actualizar la navegación en scroll
    function updateNav() {
      if (window.scrollY > 0) {
        nav?.classList.add("scrolling");

        const scrollProgress = Math.min(window.scrollY / maxScroll, 1);
        const easeProgress = 1 - Math.pow(1 - scrollProgress, 4);

        const minWidth = 528;
        const maxWidth = window.innerWidth * 0.8;
        const currentWidth = maxWidth - (maxWidth - minWidth) * easeProgress;

        if (window.innerWidth >= 768) {
          nav?.style.setProperty("width", `${currentWidth}px`);
        }
      } else {
        nav?.classList.remove("scrolling");
        nav?.style.setProperty("width", "80%");
      }
      rafId = null;
    }

    // Event listener para scroll
    window.addEventListener(
      "scroll",
      () => {
        if (!rafId) {
          rafId = requestAnimationFrame(updateNav);
        }
      },
      { passive: true }
    );

    // Smooth scrolling para enlaces internos
    document.querySelectorAll('a[href^="#"]').forEach((anchor) => {
      anchor.addEventListener("click", function (e) {
        e.preventDefault();
        const target = e.currentTarget as HTMLAnchorElement;
        const targetId = target.getAttribute("href")?.substring(1) || "";
        const targetElement = document.getElementById(targetId);
        
        if (targetElement) {
          // Scroll suave al elemento
          targetElement.scrollIntoView({
            behavior: "smooth",
            block: "start"
          });
          
          // Actualizar estado activo inmediatamente
          updateActiveLink(targetId);
        }
      });
    });

    // Función para actualizar el enlace activo
    function updateActiveLink(activeId) {
      const navLinks = document.querySelectorAll("nav a[href^='#']");
      navLinks.forEach((link) => {
        link.classList.remove("active");
        if (link.getAttribute("href") === `#${activeId}`) {
          link.classList.add("active");
        }
      });
    }

    // Intersection Observer mejorado
    function initIntersectionObserver() {
      const sections = document.querySelectorAll("section[id]");
      const navLinks = document.querySelectorAll("nav a[href^='#']");
      
      if (sections.length === 0) {
        console.warn("No se encontraron secciones con ID");
        return;
      }

      const observerOptions = {
        threshold: [0.1, 0.3, 0.5, 0.7], // Múltiples thresholds
        rootMargin: "-20% 0px -20% 0px" // Margen para activar antes
      };

      const observerCallback = (entries) => {
        let mostVisible = null;
        let maxRatio = 0;

        // Encontrar la sección más visible
        entries.forEach((entry) => {
          if (entry.isIntersecting && entry.intersectionRatio > maxRatio) {
            maxRatio = entry.intersectionRatio;
            mostVisible = entry.target;
          }
        });

        // Actualizar enlace activo solo si hay una sección claramente visible
        if (mostVisible && maxRatio > 0.3) {
          const id = mostVisible.getAttribute("id");
          updateActiveLink(id);
        }
      };

      const observer = new IntersectionObserver(observerCallback, observerOptions);
      sections.forEach((section) => {
        observer.observe(section);
        console.log(`Observando sección: ${section.id}`); // Debug
      });

      // Verificar estado inicial después de un breve delay
      setTimeout(() => {
        const viewportCenter = window.innerHeight / 2;
        let closestSection = null;
        let minDistance = Infinity;

        sections.forEach((section) => {
          const rect = section.getBoundingClientRect();
          const sectionCenter = rect.top + rect.height / 2;
          const distance = Math.abs(viewportCenter - sectionCenter);

          if (distance < minDistance && rect.top < viewportCenter && rect.bottom > viewportCenter) {
            minDistance = distance;
            closestSection = section;
          }
        });

        if (closestSection) {
          updateActiveLink(closestSection.id);
        }
      }, 100);
    }

    // Inicializar observer
    initIntersectionObserver();

    // Re-inicializar si se hace resize
    let resizeTimeout;
    window.addEventListener('resize', () => {
      clearTimeout(resizeTimeout);
      resizeTimeout = setTimeout(initIntersectionObserver, 250);
    });
  });
</script>